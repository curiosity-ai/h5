<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) Microsoft Corporation. All rights reserved.
  
  Licensed under the MIT license.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Set LanguageTargets to Microsoft.Common.targets for any project that the SDK won't (.proj, .noproj, etc)
    https://github.com/dotnet/sdk/blob/50ddfbb91be94d068514e8f4b0ce1052156364a0/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L28
    
    We can't default LanguageTargets it is set in the SDK and immediately imported.  So we can only default
    it if we know the SDK won't.  Projects probably won't load in Visual Studio but will build from the
    command-line just fine.
  -->

  <PropertyGroup>
    <!-- RFO: There is a bug in MSBuild when these values are not forcebly set here since NET50-->
    <TargetFramework>netstandard2.0</TargetFramework>
    <TargetFrameworkIdentifier>.NETStandard</TargetFrameworkIdentifier>
    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
    <TargetPlatformIdentifier>h5</TargetPlatformIdentifier>
    <TargetPlatformVersion>2.0</TargetPlatformVersion>
  </PropertyGroup>


  <PropertyGroup>
    <LanguageTargets Condition=" '$(LanguageTargets)' == '' And '$(MSBuildProjectExtension)' != '.csproj' And '$(MSBuildProjectExtension)' != '.vbproj' And '$(MSBuildProjectExtension)' != '.fsproj' ">$(MSBuildToolsPath)\Microsoft.Common.targets</LanguageTargets>
  </PropertyGroup>

  <Import Project="$(CustomBeforeH5)" Condition="'$(CustomBeforeH5)' != '' and Exists('$(CustomBeforeH5)')" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <PropertyGroup Condition="'$(UsingNETSdkDefaults)' != 'true'">
    <!-- Skip import of Microsoft.NuGet.props and Microsoft.NuGet.targets -->
    <SkipImportNuGetProps>true</SkipImportNuGetProps>
    <SkipImportNuGetBuildTargets>true</SkipImportNuGetBuildTargets>
  </PropertyGroup>

  <!-- Workaround: https://github.com/Microsoft/msbuild/issues/1293 -->
  <PropertyGroup>
    <GenerateResourceMSBuildArchitecture Condition=" '$(GenerateResourceMSBuildArchitecture)' == '' ">CurrentArchitecture</GenerateResourceMSBuildArchitecture>
    <GenerateResourceMSBuildRuntime Condition=" '$(GenerateResourceMSBuildRuntime)' == '' ">CurrentRuntime</GenerateResourceMSBuildRuntime>
  </PropertyGroup>

  <ItemGroup>
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
  </ItemGroup>

  <PropertyGroup>
    <!-- This property must be overridden to remove a few targets that compile assemblies -->

    <CoreBuildDependsOn>
      _CheckForH5;
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;

      ResolveReferences;
      PrepareResources;
      ResolveKeySource;

      GenerateAssemblyInfo;
      ResolveProjectReferences;
      ResolvePackageDependenciesForBuild;


      GetTargetPath;
      PrepareForRun;
      IncrementalClean;
      GenerateBuildDependencyFile;
      GenerateBuildRuntimeConfigurationFiles;
      CopyFilesToOutputDirectory;
      Check1;
      Check2;
      Check3;
      Check4;
      Check5;
      _H5Build;
      PostBuildEvent
    </CoreBuildDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <CoreCleanDependsOn>
      _SdkBeforeClean;
      $(CoreCleanDependsOn)
    </CoreCleanDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <RebuildDependsOn>
      _SdkBeforeRebuild;
      $(RebuildDependsOn)
    </RebuildDependsOn>
  </PropertyGroup>

  <!-- H5 implements it's own standard library for all C# base types (like System.Object and everything else under the System namespace).
       To avoid Visual Studio complaining that these types are defined in two assemblies, we need to remove all references with the variables bellow-->
  <PropertyGroup>
    <ExcludeMscorlibFacade>true</ExcludeMscorlibFacade>
    <NoStdLib>true</NoStdLib>
    <NoCompilerStandardLib>true</NoCompilerStandardLib>
    <NoExplicitReferenceToStdLib>true</NoExplicitReferenceToStdLib>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
    <AddAdditionalExplicitAssemblyReferences>false</AddAdditionalExplicitAssemblyReferences>
    <AdditionalExplicitAssemblyReferences />
  </PropertyGroup>

  <PropertyGroup>
    <!-- H5 supports the C# 7.2 language spec, hopefully in the future we'll add support for newer versions -->
    <LangVersion>7.2</LangVersion>
    <!-- Set the flags not to generate debug symbols (as this is not generated by H5), so that they're also not included when running dotnet pack - otherwise it would complain about missing files -->
    <DebugType>None</DebugType>
    <DebugSymbols>false</DebugSymbols>
    <!-- Projects can set this flag to false to disable auto-update of the H5 compiler-->
    <UpdateH5 Condition="'$(UpdateH5)' == ''">true</UpdateH5>
    <UseLocalH5 Condition="'$(UseLocalH5)' == ''">false</UseLocalH5>
  </PropertyGroup>


  <!-- Most of the logic in this file is there to enable support for incremental compilation. This is a subset of the applicable rules from the original target: https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets  -->

  <PropertyGroup>
    <_GenerateRuntimeConfigurationPropertyInputsCache Condition="'$(_GenerateRuntimeConfigurationPropertyInputsCache)' == ''">$(IntermediateOutputPath)$(MSBuildProjectName).genruntimeconfig.cache</_GenerateRuntimeConfigurationPropertyInputsCache>
    <_GenerateRuntimeConfigurationPropertyInputsCache>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_GenerateRuntimeConfigurationPropertyInputsCache)))</_GenerateRuntimeConfigurationPropertyInputsCache>
    <UserRuntimeConfig Condition=" '$(UserRuntimeConfig)' == '' ">$(MSBuildProjectDirectory)/runtimeconfig.template.json</UserRuntimeConfig>
    <ProjectRuntimeConfigFileName Condition="'$(ProjectRuntimeConfigFileName)' == ''">$(AssemblyName).runtimeconfig.json</ProjectRuntimeConfigFileName>
    <ProjectRuntimeConfigFilePath Condition="'$(ProjectRuntimeConfigFilePath)' == ''">$(TargetDir)$(ProjectRuntimeConfigFileName)</ProjectRuntimeConfigFilePath>
    <ProjectRuntimeConfigDevFilePath Condition="'$(ProjectRuntimeConfigDevFilePath)' == ''">$(TargetDir)$(AssemblyName).runtimeconfig.dev.json</ProjectRuntimeConfigDevFilePath>
    <IncludeMainProjectInDepsFile Condition=" '$(IncludeMainProjectInDepsFile)' == '' ">true</IncludeMainProjectInDepsFile>
  </PropertyGroup>

  <ItemGroup>
    <GenerateRuntimeConfigurationFilesInputs Include="$(ProjectAssetsFile)" />
    <GenerateRuntimeConfigurationFilesInputs Include="$(ProjectAssetsCacheFile)" />
    <GenerateRuntimeConfigurationFilesInputs Include="$(UserRuntimeConfig)" Condition=" Exists($(UserRuntimeConfig)) " />
  </ItemGroup>

  <Target Name="_ComputePackageReferencePublish">
    <Message Importance="normal" Text="Running _ComputePackageReferencePublish for $(AssemblyName)" />
    <ItemGroup>

      <!-- PrivateAssets="All" means exclude from publish, unless Publish metadata is specified separately -->
      <PackageReference Publish="false"
                        Condition="('%(PackageReference.PrivateAssets)' == 'All') And ('%(PackageReference.Publish)' == '')"/>

      <_ExcludeFromPublishPackageReference Include="@(PackageReference)"
                                           Condition="('%(PackageReference.Publish)' == 'false')" />
    </ItemGroup>
  </Target>

  <!--
    _HandlePackageFileConflicts
    Handles package file conflict resolution for build.
    This will differ from the conflict resolution at publish time if the publish assets differ from build.
  -->
  <Target Name="_HandlePackageFileConflicts" DependsOnTargets="GetFrameworkPaths;GetReferenceAssemblyPaths;ResolveTargetingPackAssets">
    <Message Importance="normal" Text="Running _HandlePackageFileConflicts" />

    <ItemGroup>
      <!--
        All runtime assets for conflict resolution.
        Exclude the copy-local items since those are passed in separately.
      -->
      <_RuntimeAssetsForConflictResolution
        Include="@(RuntimeCopyLocalItems);
                 @(NativeCopyLocalItems);
                 @(ResourceCopyLocalItems);
                 @(RuntimeTargetsCopyLocalItems)"
        Exclude="@(ReferenceCopyLocalPaths)" />
    </ItemGroup>

    <ResolvePackageFileConflicts References="@(Reference)"
                                 ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)"
                                 OtherRuntimeItems="@(_RuntimeAssetsForConflictResolution)"
                                 PlatformManifests="@(PackageConflictPlatformManifests)"
                                 TargetFrameworkDirectories="$(TargetFrameworkDirectory)"
                                 PackageOverrides="@(PackageConflictOverrides)"
                                 PreferredPackages="$(PackageConflictPreferredPackages)">
      <Output TaskParameter="ReferencesWithoutConflicts" ItemName="_ReferencesWithoutConflicts" />
      <Output TaskParameter="ReferenceCopyLocalPathsWithoutConflicts" ItemName="_ReferenceCopyLocalPathsWithoutConflicts" />
      <Output TaskParameter="Conflicts" ItemName="_ConflictPackageFiles" />
    </ResolvePackageFileConflicts>

    <!-- Replace Reference / ReferenceCopyLocalPaths with the filtered lists.
         We must remove all and include rather than just remove since removal is based
         only on ItemSpec and duplicate ItemSpecs may exist with different metadata 
         (eg: HintPath) -->
    <ItemGroup>
      <Reference Remove="@(Reference)" />
      <Reference Include="@(_ReferencesWithoutConflicts)" />
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(_ReferenceCopyLocalPathsWithoutConflicts)" />
    </ItemGroup>

  </Target>

  <Target Name="GenerateBuildDependencyFile"
          DependsOnTargets="_HandlePackageFileConflicts;_ComputeReferenceAssemblies;_ComputeUserRuntimeAssemblies;ResolveRuntimePackAssets;_ComputePackageReferencePublish"
          BeforeTargets="CopyFilesToOutputDirectory"
          Inputs="$(ProjectAssetsFile);$(ProjectAssetsCacheFile);$(MSBuildAllProjects)"
          Outputs="$(ProjectDepsFilePath)">

    <Message Importance="normal" Text="Running GenerateBuildDependencyFile" />

    <!-- Set a dummy Version if it hasn't been set by DefaultAssemblyInfo.targets -->
    <PropertyGroup Condition="'$(UsingNETSdkDefaults)' != 'true'">
      <Version Condition="'$(Version)' == ''">1.0.0</Version>
    </PropertyGroup>

    <ItemGroup>
      <ResolvedCompileFileDefinitions Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' == 'Reference'" />
      <NativeCopyLocalItems Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' != 'Reference'" />
      <ResourceCopyLocalItems Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' != 'Reference'" />
      <RuntimeCopyLocalItems Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' != 'Reference'" />
      <RuntimeTargetsCopyLocalItems Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' != 'Reference'" />
      <RuntimePackAsset Remove="@(_ConflictPackageFiles)" Condition="'%(_ConflictPackageFiles.ConflictItemType)' != 'Reference'" />
    </ItemGroup>

    <GenerateDepsFile ProjectPath="$(MSBuildProjectFullPath)"
                      AssetsFilePath="$(ProjectAssetsFile)"
                      DepsFilePath="$(ProjectDepsFilePath)"
                      TargetFramework="$(TargetFramework)"
                      AssemblyName="$(AssemblyName)"
                      AssemblyExtension="$(TargetExt)"
                      AssemblyVersion="$(Version)"
                      AssemblySatelliteAssemblies="@(IntermediateSatelliteAssembliesWithTargetPath)"
                      ReferencePaths="@(ReferencePath)"
                      ReferenceDependencyPaths="@(ReferenceDependencyPaths)"
                      ReferenceSatellitePaths="@(ReferenceSatellitePaths)"
                      ReferenceAssemblies="@(_ReferenceAssemblies)"
                      RuntimePackAssets="@(RuntimePackAsset)"
                      IncludeMainProject="$(IncludeMainProjectInDepsFile)"
                      RuntimeIdentifier="$(RuntimeIdentifier)"
                      PlatformLibraryName="$(MicrosoftNETPlatformLibrary)"
                      RuntimeFrameworks="@(RuntimeFramework)"
                      CompilerOptions="@(DependencyFileCompilerOptions)"
                      CompileReferences="@(ResolvedCompileFileDefinitions)"
                      ResolvedNuGetFiles="@(NativeCopyLocalItems);@(ResourceCopyLocalItems);@(RuntimeCopyLocalItems)"
                      UserRuntimeAssemblies="@(UserRuntimeAssembly)"
                      ResolvedRuntimeTargetsFiles="@(RuntimeTargetsCopyLocalItems)"
                      IsSelfContained="$(SelfContained)"
                      IncludeRuntimeFileVersions="$(IncludeFileVersionsInDependencyFile)"
                      RuntimeGraphPath="$(BundledRuntimeIdentifierGraphFile)"/>

    <Message Importance="high" Text="No output assembly found, will build." Condition="!Exists('$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)')"  />

    <ItemGroup>
      <!-- Do this in an ItemGroup instead of as an output parameter of the GenerateDepsFile task so that it still gets added to the item set during incremental builds when the task is skipped -->
      <FileWrites Include="$(ProjectDepsFilePath)" Condition="Exists('$(ProjectDepsFilePath)')"/>
    </ItemGroup>
  </Target>


  <Target Name="GenerateBuildRuntimeConfigurationFiles"
          DependsOnTargets="_GenerateRuntimeConfigurationFilesInputCache"
          BeforeTargets="CopyFilesToOutputDirectory"
          Inputs="@(GenerateRuntimeConfigurationFilesInputs)"
          Outputs="$(ProjectRuntimeConfigFilePath);$(ProjectRuntimeConfigDevFilePath)">

    <Message Importance="normal" Text="Running GenerateBuildRuntimeConfigurationFiles" />

    <GenerateRuntimeConfigurationFiles AssetsFilePath="$(ProjectAssetsFile)"
                                           TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
                                           TargetFramework="$(TargetFramework)"
                                           RuntimeConfigPath="$(ProjectRuntimeConfigFilePath)"
                                           RuntimeConfigDevPath="$(ProjectRuntimeConfigDevFilePath)"
                                           RuntimeIdentifier="$(RuntimeIdentifier)"
                                           PlatformLibraryName="$(MicrosoftNETPlatformLibrary)"
                                           RuntimeFrameworks="@(RuntimeFramework)"
                                           RollForward="$(RollForward)"
                                           UserRuntimeConfig="$(UserRuntimeConfig)"
                                           HostConfigurationOptions="@(RuntimeHostConfigurationOption)"
                                           AdditionalProbingPaths="@(AdditionalProbingPath)"
                                           IsSelfContained="$(SelfContained)"
                                           WriteIncludedFrameworks="true">
    </GenerateRuntimeConfigurationFiles>

    <Message Importance="high" Text="Writing project runtime config file $(ProjectRuntimeConfigFilePath)" Condition="Exists('$(ProjectRuntimeConfigFilePath)')"  />

    <ItemGroup>
      <!-- Do this in an ItemGroup instead of as an output parameter of the GenerateDepsFile task so that it still gets added to the item set during incremental builds when the task is skipped -->
      <FileWrites Include="$(ProjectRuntimeConfigFilePath)" Condition="Exists('$(ProjectRuntimeConfigFilePath)')"/>
      <FileWrites Include="$(ProjectRuntimeConfigDevFilePath)" Condition="Exists('$(ProjectRuntimeConfigDevFilePath)')"/>
    </ItemGroup>

  </Target>


  <!-- To achieve incremental build with property change. When any property changes, WriteOnlyWhenDifferent will be triggered to write cache file.
         And the cache file's timestamp will be later, and it then triggers the incremental build.-->

  <Target Name="_GenerateRuntimeConfigurationFilesInputCache">
    <Message Importance="normal" Text="Running _GenerateRuntimeConfigurationFilesInputCache" />

    <ItemGroup>
      <GenerateRuntimeConfigurationFilesInputs Include="$(_GenerateRuntimeConfigurationPropertyInputsCache)" />

      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="@(AdditionalProbingPath->'%(Identity)')"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(EnableDynamicLoading)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(RollForward)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="@(RuntimeHostConfigurationOption->'%(Identity)%(Value)')"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(RuntimeIdentifier)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(SelfContained)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(TargetFramework)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(UserRuntimeConfig)"/>
      <_GenerateRuntimeConfigurationPropertyInputsCacheToHash Include="$(_WriteIncludedFrameworks)"/>
    </ItemGroup>

    <Hash ItemsToHash="@(_GenerateRuntimeConfigurationPropertyInputsCacheToHash)">
      <Output TaskParameter="HashResult" PropertyName="_GenerateRuntimeConfigurationPropertyInputsCacheHash" />
    </Hash>

    <WriteLinesToFile
          Lines="$(_GenerateRuntimeConfigurationPropertyInputsCacheHash)"
          File="$(_GenerateRuntimeConfigurationPropertyInputsCache)"
          Overwrite="True"
          WriteOnlyWhenDifferent="True" />

    <ItemGroup>
      <FileWrites Include="$(_GenerateRuntimeConfigurationPropertyInputsCache)" />
    </ItemGroup>
  </Target>

  <Target Name="_SdkBeforeClean">
    <Message Importance="normal" Text="Running _SdkBeforeClean" />
    <ItemGroup>
      <_FilesToDeleteO Include="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)"/>
    </ItemGroup>
    <Message Importance="high" Text="Deleting previous assembly: @(_FilesToDeleteO)"/>
    <Delete Files="@(_FilesToDeleteO)"/>
    <PropertyGroup Condition="'$(_CleaningWithoutRebuilding)' == ''">
      <_CleaningWithoutRebuilding>true</_CleaningWithoutRebuilding>
      <EmitAssetsLogMessages>false</EmitAssetsLogMessages>
    </PropertyGroup>
  </Target>

  <Target Name="_SdkBeforeRebuild">
    <Message Importance="normal" Text="Running _SdkBeforeRebuild" />
    <PropertyGroup>
      <_CleaningWithoutRebuilding>false</_CleaningWithoutRebuilding>
    </PropertyGroup>
  </Target>


  <!--
    ============================================================
                                        _ComputeUserRuntimeAssemblies
    Computes references or reference dependencies that are copy local.
     NOTE: NuGet and framework references are never copy local so those are not included here.
           These will be project references and direct references and their copy local dependencies.
    ============================================================
    -->
  <Target Name="_ComputeUserRuntimeAssemblies">
    <Message Importance="high" Text="Running _ComputeUserRuntimeAssemblies" />
    <ItemGroup>
      <!-- IncludeRuntimeDependency=true metadata is escape hatch to include a non-copy local reference in deps file as a runtime dependency -->
      <ReferencePath>
        <IncludeRuntimeDependency Condition="'%(ReferencePath.IncludeRuntimeDependency)' == '' and '%(ReferencePath.CopyLocal)' == 'true'">true</IncludeRuntimeDependency>
      </ReferencePath>

      <ReferenceDependencyPaths>
        <IncludeRuntimeDependency Condition="'%(ReferenceDependencyPaths.IncludeRuntimeDependency)' == '' and '%(ReferenceDependencyPaths.CopyLocal)' == 'true'">true</IncludeRuntimeDependency>
      </ReferenceDependencyPaths>

      <UserRuntimeAssembly Include="@(ReferencePath->WithMetadataValue('IncludeRuntimeDependency', 'true'))"  />
      <UserRuntimeAssembly Include="@(ReferenceDependencyPaths->WithMetadataValue('IncludeRuntimeDependency', 'true'))" />
    </ItemGroup>
  </Target>

  <Target Name="_ComputeReferenceAssemblies" DependsOnTargets="ResolveAssemblyReferences">

    <Message Importance="normal" Text="Running _ComputeReferenceAssemblies" />

    <ItemGroup>
      <_FrameworkReferenceAssemblies Include="@(ReferencePath)"
                                     Condition="(%(ReferencePath.FrameworkFile) == 'true' or
                                                %(ReferencePath.ResolvedFrom) == 'ImplicitlyExpandDesignTimeFacades')
                                            and ('%(ReferencePath.NuGetSourceType)' == ''  or
                                                 '%(ReferencePath.NuGetIsFrameworkReference)' == 'true')" />

      <!--
      "ReferenceOnly" assemblies are assemblies that are only used at compile-time, and they can't be resolved
      by the normal compile-assembly resolvers at runtime:
      1. App local
      2. NuGet/Package layout
      3. ProgramFiles\Reference Assemblies
      These assemblies need to be copied to the 'refs' folder for both build and publish.
      -->
      <_ReferenceOnlyAssemblies Include="@(ReferencePath)"
                                Exclude="@(_FrameworkReferenceAssemblies)"
                                Condition="%(ReferencePath.CopyLocal) != 'true' and
                                           %(ReferencePath.NuGetSourceType) == ''" />

      <_ReferenceAssemblies Include="@(_FrameworkReferenceAssemblies)" />
      <_ReferenceAssemblies Include="@(_ReferenceOnlyAssemblies)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        _CopyReferenceOnlyAssembliesForBuild

    Copies reference assemblies that normally can't be resolved at runtime to the 'refs' folder in the build output.
    This is necessary in order for the running app to resolve these reference assemblies.
    ============================================================
    -->
  <Target Name="_CopyReferenceOnlyAssembliesForBuild"
          Condition="'$(PreserveCompilationReferences)' == 'true'"
          DependsOnTargets="_ComputeReferenceAssemblies"
          AfterTargets="CopyFilesToOutputDirectory">

    <Message Importance="normal" Text="Running _CopyReferenceOnlyAssembliesForBuild" />

    <Copy SourceFiles="@(_ReferenceOnlyAssemblies)"
          DestinationFolder="$(OutDir)$(RefAssembliesFolderName)"
          SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--The following checks are just debug messages to know what triggered the compilation of the project. They will be eventually removed in the future.-->

  <Target Name="Check1" Inputs="$(MSBuildAllProjects)" Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)">
    <Message Importance="low" Text="Will rebuild, as this changed: MSBuildAllProjects variable" />
  </Target>

  <Target Name="Check2" Inputs="@(SourceFilesProjectOutputGroupOutput)" Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)" DependsOnTargets="SourceFilesProjectOutputGroup">
    <Message Importance="low" Text="Will rebuild, as this changed: SourceFilesProjectOutputGroupOutput variable" />
  </Target>

  <Target Name="Check3" Inputs="$(ProjectDepsFilePath)" Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)" DependsOnTargets="GenerateBuildDependencyFile">
    <Message Importance="low" Text="Will rebuild, as this changed: ProjectDepsFilePath variable" />
  </Target>

  <Target Name="Check4" Inputs="$(ProjectRuntimeConfigFilePath)" Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)" DependsOnTargets="GenerateBuildRuntimeConfigurationFiles">
    <Message Importance="low" Text="Will rebuild, as this changed: ProjectRuntimeConfigFilePath variable" />
  </Target>

  <Target Name="Check5" Inputs="$(ProjectRuntimeConfigDevFilePath)" Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)" DependsOnTargets="GenerateBuildRuntimeConfigurationFiles">
    <Message Importance="low" Text="Will rebuild, as this changed: ProjectRuntimeConfigDevFilePath variable" />
  </Target>


  <Target Name="_CheckForH5">
	  
    <!-- If the global compiler is not installed (and we are not using the local compiler), then set the flag to install it. -->
    <Exec Command="h5" ConsoleToMsBuild="false" WorkingDirectory="$(ProjectDir)" ContinueOnError="true" IgnoreExitCode="true" StandardOutputImportance="Low" StandardErrorImportance="Low" Condition="!$(UseLocalH5)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>

    <PropertyGroup Condition="!$(UseLocalH5) and '$(ExitCode)' != '0'">
      <UpdateH5>true</UpdateH5>
    </PropertyGroup>

	<Message Importance="high" Text="H5 is not installed as a global tool. Will attempt to install it." Condition="!$(UseLocalH5) and '$(ExitCode)' != '0'"/>

    <!-- If using the local compiler, do not install/update. -->    
    <PropertyGroup Condition="$(UseLocalH5)">
      <UpdateH5>false</UpdateH5>
    </PropertyGroup>

    <Message Importance="high" Text="Using h5 as a local tool (will not install or update)." Condition="$(UseLocalH5)"/>

  </Target>


  <!-- RFO 2023.02.03: Removing $(ProjectRuntimeConfigFilePath);$(ProjectRuntimeConfigDevFilePath) from Inputs seems to fix the incremental compilation not working correctly -->
  <Target Name="_H5Build"
      DependsOnTargets="SourceFilesProjectOutputGroup;GenerateBuildDependencyFile;GenerateBuildRuntimeConfigurationFiles;_ComputeReferenceAssemblies;_ComputeUserRuntimeAssemblies;_CopyReferenceOnlyAssembliesForBuild"
      Inputs="@(UserRuntimeAssembly);@(_ReferenceAssemblies);@(SourceFilesProjectOutputGroupOutput);$(MSBuildAllProjects);$(ProjectDepsFilePath)"
      Outputs="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)">

    <Message Importance="high" Text="Installing or updating the h5 compiler." Condition="$(UpdateH5)" />
    <Exec Command="dotnet tool update --global h5-compiler" Condition="$(UpdateH5)" ContinueOnError="WarnAndContinue"/>

    <Message Importance="high" Text="Deleting previous assembly: $(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)"/>
    <Delete Files="$(ProjectDir)$(OutputPath)$(TargetName)$(TargetExt)"/>

    <!--This is where the h5 is finally called to compile the code -->

    <Message Importance="high" Text="H5 compilation begins now... " />

    <Exec Command="h5 --project &quot;$(ProjectPath)&quot; --configuration &quot;$(Configuration)&quot; --assembly-version &quot;$(AssemblyVersion)&quot;" ConsoleToMsBuild="True" WorkingDirectory="$(ProjectDir)" ContinueOnError="ErrorAndStop" IgnoreExitCode="false" Condition="!$(UseLocalH5)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>

    <Exec Command="dotnet tool run h5 --no-server --project &quot;$(ProjectPath)&quot; --configuration &quot;$(Configuration)&quot; --assembly-version &quot;$(AssemblyVersion)&quot;" ConsoleToMsBuild="True" WorkingDirectory="$(ProjectDir)" ContinueOnError="ErrorAndStop" IgnoreExitCode="false" Condition="$(UseLocalH5)">
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>

    <Error Text="H5 compilation failed, see logs for error message" Condition="$(ExitCode) != 0"/>

    <Message Importance="high" Text="... H5 compilation finished!" />
  </Target>

  <Import Project="$(CustomAfterH5)" Condition="'$(CustomAfterH5)' != '' and Exists('$(CustomAfterH5)')" />
</Project>
